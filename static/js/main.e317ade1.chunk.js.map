{"version":3,"sources":["images/Ship-Landscape.svg","Components/CloudsAndMoon/images/eclipse.svg","Components/CloudsAndMoon/images/moon.svg","images/Stars.svg","Components/CloudsAndMoon/CloudsAndMoon.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","name","wrap","CloudsAndMoon","offset","speed","style","pointerEvents","src","eclipse","width","marginLeft","opacity","display","Moon","marginRight","App","pages","ref","parallax","factor","backgroundImage","ShipLandscape","backgroundSize","zIndex","onClick","scrollTo","alignItems","justifyContent","backgroundColor","Stars","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e317ade1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ship-Landscape.ce521a2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/eclipse.d032006c.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.60c8a4bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/Stars.5546c7c6.svg\";","import React from 'react'\r\nimport { ParallaxLayer } from 'react-spring/renderprops-addons'\r\nimport eclipse from './images/eclipse.svg'\r\nimport Moon from './images/moon.svg'\r\n\r\nconst url = (name, wrap = false) => `${wrap ? 'url(' : ''}https://awv3node-homepage.surge.sh/build/assets/${name}.svg${wrap ? ')' : ''}`\r\n\r\nconst CloudsAndMoon = () => {\r\n    return (\r\n        <div>\r\n\r\n            <ParallaxLayer offset={0.1} speed={-0.6} style={{ pointerEvents: 'none' }}>\r\n                <img src={eclipse} style={{ width: '15%', marginLeft: '70%', opacity: 0.8 }} />\r\n            </ParallaxLayer>\r\n\r\n            <ParallaxLayer offset={0.7} speed={0.8} style={{ opacity: 0.1 }}>\r\n                <img src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '55%' }} />\r\n                <img src={url('cloud')} style={{ display: 'block', width: '10%', marginLeft: '15%' }} />\r\n            </ParallaxLayer>\r\n\r\n            <ParallaxLayer offset={0.75} speed={0.5} style={{ opacity: 0.1 }}>\r\n                <img src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '70%' }} />\r\n                <img src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '40%' }} />\r\n            </ParallaxLayer>\r\n\r\n            <ParallaxLayer offset={0.2} speed={0.2} style={{ opacity: 0.2 }}>\r\n                <img src={url('cloud')} style={{ display: 'block', width: '10%', marginLeft: '10%' }} />\r\n                <img src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '75%' }} />\r\n            </ParallaxLayer>\r\n\r\n            <ParallaxLayer offset={0.6} speed={-0.1} style={{ opacity: 0.4 }}>\r\n                <img src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '60%' }} />\r\n                <img src={url('cloud')} style={{ display: 'block', width: '25%', marginLeft: '30%' }} />\r\n                <img src={url('cloud')} style={{ display: 'block', width: '10%', marginLeft: '80%' }} />\r\n            </ParallaxLayer>\r\n\r\n            <ParallaxLayer offset={0.6} speed={0.4} style={{ opacity: 0.6 }}>\r\n                <img src={url('cloud')} style={{ display: 'block', width: '20%', marginLeft: '5%' }} />\r\n                <img src={url('cloud')} style={{ display: 'block', width: '15%', marginLeft: '75%' }} />\r\n            </ParallaxLayer>\r\n\r\n            <ParallaxLayer offset={3.1} speed={-0.3} style={{ pointerEvents: 'none' }}>\r\n                <img src={Moon} style={{ width: '15%', marginRight: '70%', opacity: 0.8 }} />\r\n            </ParallaxLayer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CloudsAndMoon;\r\n\r\n\r\n","import React from 'react'\nimport { Parallax, ParallaxLayer } from 'react-spring/renderprops-addons'\nimport ShipLandscape from './images/Ship-Landscape.svg'\nimport CloudsAndMoon from './Components/CloudsAndMoon/CloudsAndMoon'\nimport Stars from './images/Stars.svg'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Parallax pages={4} ref={ref => (this.parallax = ref)} >\n\n        <CloudsAndMoon />\n\n        <ParallaxLayer\n          offset={0}\n          speed={0}\n          factor={3}\n          style={{ backgroundImage: `url(${ShipLandscape})`, backgroundSize: 'cover', zIndex: -1 }}\n        />\n\n        <ParallaxLayer\n          offset={0}\n          speed={0}\n          onClick={() => this.parallax.scrollTo(1)}\n        />\n\n        <ParallaxLayer\n          offset={1}\n          speed={0}\n          onClick={() => this.parallax.scrollTo(2)}\n          style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n        />\n\n        <ParallaxLayer\n          offset={2}\n          speed={-0}\n          style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n          onClick={() => this.parallax.scrollTo(3)}\n        />\n\n        <ParallaxLayer\n          offset={3}\n          speed={-0.1}\n          style={{ backgroundColor: 'rgb(26, 8, 24)', backgroundImage: `url(${Stars})`, backgroundSize: 'cover', zIndex: -1 }}\n          onClick={() => this.parallax.scrollTo(0)}\n        />\n\n      </Parallax>\n    )\n  }\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}